{"version":3,"sources":["components/Text.js","components/Input.js","App.js","utils/group.js","utils/avg.js","hooks/useInterval.js","reportWebVitals.js","index.js"],"names":["Key","letter","bg","state","style","background","value","Text","text","map","index","Input","keyDown","disabled","useState","setText","col","row","onKeyDown","event","key","length","charCodeAt","prev","App","second","setSecond","position","setPosition","split","textSplitted","setTextSplitted","ended","setEnded","keyBySeconds","setKeyBySecond","useEffect","grouped","array","cb","r","i","a","Object","prototype","hasOwnProperty","call","push","group","kbs","keys","reduce","acc","callback","delay","savedCallback","useRef","current","id","setInterval","clearInterval","useInterval","className","console","log","t","idx","prevPosition","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2PAAO,SAASA,EAAT,GAA0B,IAAXC,EAAU,EAAVA,OACZC,EAAsB,OAAjBD,EAAOE,MACZ,QACiB,IAAjBF,EAAOE,MACH,UACA,UAEV,OACI,sBACIC,MAAO,CACHC,WAAYH,GAFpB,SAIED,EAAOK,QAIF,SAASC,EAAT,GACX,OADmC,EAARC,KACfC,KAAI,SAACR,EAAQS,GAAT,OAAmB,cAACV,EAAD,CAAKC,OAAQA,GAAaS,MCflD,SAASC,EAAT,GAAuC,IAAtBC,EAAqB,EAArBA,QAASC,EAAY,EAAZA,SAAY,EAC3BC,mBAAS,IADkB,mBAC5CN,EAD4C,KACtCO,EADsC,KAUnD,OACE,0BAAUC,IAAI,KAAKC,IAAI,IAAIX,MAAOE,EAAMU,UARnB,SAACC,GACG,IAArBA,EAAMC,IAAIC,QAAgBF,EAAMC,IAAIE,cAAgB,IAAMH,EAAMC,IAAIE,cAAgB,MACtFV,EAAQO,EAAMC,KACdL,GAAQ,SAAAQ,GAAI,OAAIA,EAAOJ,EAAMC,SAKoCP,SAAUA,ICiDlEW,MAtDf,WAAgB,IAAD,EACeV,mBAAS,GADxB,mBACNW,EADM,KACEC,EADF,OAEmBZ,mBAAS,GAF5B,mBAENa,EAFM,KAEIC,EAFJ,OAI2Bd,mBAD3B,0BACyCe,MAAM,IAAIpB,KAAI,SAAAR,GAAM,MAAK,CAACE,MAAO,KAAMG,MAAOL,EAAQwB,OAAQ,UAJvG,mBAINK,EAJM,KAIQC,EAJR,OAKajB,oBAAS,GALtB,mBAKNkB,EALM,KAKCC,EALD,OAM0BnB,mBAAS,MANnC,mBAMNoB,EANM,KAMQC,EANR,KA2Cb,OAnCAC,qBAAU,WACR,GAAIJ,EAAO,CACT,IAAMK,EClBG,SAAeC,EAAOC,GAGjC,IAFA,IAAMC,EAAI,GAEDC,EAAI,EAAGA,EAAIH,EAAMjB,OAAQoB,IAAK,CACnC,IAAMC,EAAIH,EAAGD,EAAMG,IACfE,OAAOC,UAAUC,eAAeC,KAAKN,EAAGE,GACxCF,EAAEE,GAAGK,KAAKT,EAAMG,IAEhBD,EAAEE,GAAK,CAACJ,EAAMG,IAItB,OAAOD,EDMWQ,CAAMlB,GAAe,SAAA7B,GAAM,OAAIA,EAAOwB,UAChDwB,GEnBgBX,EFmBNK,OAAOO,KACrBb,GAED5B,KAAI,SAAAgB,GAAM,OAAIY,EAAQZ,MACtBhB,KAAI,SAAAuC,GAAK,OAAIA,EAAM3B,WEtBJ8B,QAAO,SAACC,EAAKX,GAAN,OAAYW,EAAMX,IAAG,GAEjCH,EAAMjB,OFsBjBc,EAAec,GEzBN,IAAaX,IF2BvB,CAACN,IGzBS,SAAqBqB,GAAyB,IAAfC,EAAc,uDAAN,IAC5CC,EAAgBC,mBAEtBpB,qBAAU,WACNmB,EAAcE,QAAUJ,KAG5BjB,qBAAU,WAKN,GAAc,OAAVkB,EAAgB,CAChB,IAAII,EAAKC,aALb,WACIJ,EAAcE,YAIaH,GAC3B,OAAO,kBAAMM,cAAcF,OAEhC,CAACJ,IHWNO,EAAY,WACVnC,GAAU,SAAAH,GAAI,OAAIA,EAAO,OACxB,KAqBD,sBAAKuC,UAAU,MAAf,UACE,6CACanC,EADb,sBAC0CK,GAASF,EAAaH,GAAUrB,MAD1E,KACmF0B,GAAK,uCAAoCE,MAE5H,cAAC3B,EAAD,CAAMC,KAAMsB,IACZ,cAACnB,EAAD,CAAOC,QAxBY,SAAAQ,GACrB2C,QAAQC,IAAI5C,EAAKU,EAAaH,GAAUrB,OACxCyB,GAAgB,SAAAR,GAAI,OAAIA,EAAKd,KAAI,SAACwD,EAAGC,GACnC,OAAIA,IAAQvC,EACH,2BACFsC,GADL,IAEE9D,MAAOiB,IAAQG,EAAKI,GAAUrB,MAC9BmB,OAAQA,IAIL,eAAIwC,SAEbF,QAAQC,IAAIlC,GACZG,EAASN,IAAaG,EAAaT,OAAS,GAC5CO,GAAY,SAAAuC,GAAY,OAAIA,EAAe,MASTtD,SAAUmB,QI7CjCoC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdV,aAAY,WACVkB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,WAEzB,KAKHb,M","file":"static/js/main.661fa69c.chunk.js","sourcesContent":["export function Key({ letter }) {\r\n    const bg = letter.state === null\r\n        ? '#CCC'\r\n        : letter.state === true\r\n            ? '#00FF00'\r\n            : '#FF0000'\r\n\r\n    return (\r\n        <span\r\n            style={{\r\n                background: bg\r\n            }}\r\n        >{letter.value}</span>\r\n    )\r\n} \r\n\r\nexport default function Text({ text }) {\r\n    return text.map((letter, index) => <Key letter={letter} key={index} />)\r\n}","import { useState } from \"react\"\r\n\r\nexport default function Input({ keyDown, disabled }) {\r\n  const [text, setText] = useState('')\r\n\r\n  const keyDownHandler = (event) => {\r\n    if (event.key.length === 1 && event.key.charCodeAt() >= 32 && event.key.charCodeAt() <= 126) {\r\n      keyDown(event.key)\r\n      setText(prev => prev + event.key)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <textarea col=\"10\" row=\"5\" value={text} onKeyDown={keyDownHandler} disabled={disabled}></textarea>\r\n  )\r\n}","import './App.css'\nimport Text from './components/Text'\nimport Input from './components/Input'\nimport { useEffect, useState } from 'react'\nimport useInterval from './hooks/useInterval'\nimport group from './utils/group'\nimport avg from './utils/avg'\n\nfunction App() {\n  const [second, setSecond] = useState(0)\n  const [position, setPosition] = useState(0)\n  const text = 'Este texto es de prueba'\n  const [textSplitted, setTextSplitted] = useState(text.split('').map(letter => ({state: null, value: letter, second: null})))\n  const [ended, setEnded] = useState(false)\n  const [keyBySeconds, setKeyBySecond] = useState(null)\n\n  useEffect(() => {\n    if (ended) {\n      const grouped = group(textSplitted, (letter => letter.second))\n      const kbs = avg(Object.keys(\n        grouped\n      )\n      .map(second => grouped[second])\n      .map(group => group.length))\n\n      setKeyBySecond(kbs)\n    }\n  }, [ended])\n\n  useInterval(() => {\n    setSecond(prev => prev + 1)\n  }, 1000)\n\n  const keyDownHandler = key => {\n    console.log(key, textSplitted[position].value)\n    setTextSplitted(prev => prev.map((t, idx) => {\n      if (idx === position) {\n        return {\n          ...t,\n          state: key === prev[position].value,\n          second: second\n        }\n      }\n\n      return {...t}\n    }))\n    console.log(textSplitted)\n    setEnded(position === textSplitted.length - 1)\n    setPosition(prevPosition => prevPosition + 1)\n  }\n\n  return (\n    <div className=\"App\">\n      <div>\n        position: {position}, current letter: {!ended && textSplitted[position].value}, {ended && `teclas pulsadas por segundo: ${keyBySeconds}`}\n      </div>\n      <Text text={textSplitted} />\n      <Input keyDown={keyDownHandler} disabled={ended} />\n    </div>\n  );\n}\n\nexport default App;\n","export default function group(array, cb) {\r\n    const r = {}\r\n\r\n    for (let i = 0; i < array.length; i++) {\r\n        const a = cb(array[i])\r\n        if (Object.prototype.hasOwnProperty.call(r, a)) {\r\n            r[a].push(array[i])\r\n        } else {\r\n            r[a] = [array[i]]\r\n        }\r\n    }\r\n\r\n    return r\r\n}\r\n","export default function avg(array) {\r\n    const sum = array.reduce((acc, i) => acc + i, 0)\r\n\r\n    return sum / array.length\r\n}","import { useRef, useEffect } from 'react'\r\n\r\nexport default function useInterval(callback, delay = 1000) {\r\n    const savedCallback = useRef()\r\n\r\n    useEffect(() => {\r\n        savedCallback.current = callback\r\n    })\r\n\r\n    useEffect(() => {\r\n        function tick() {\r\n            savedCallback.current()\r\n        }\r\n\r\n        if (delay !== null) {\r\n            let id = setInterval(tick, delay)\r\n            return () => clearInterval(id)\r\n        }\r\n    }, [delay])\r\n}\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nsetInterval(() => {\n  ReactDOM.render(\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n  )\n}, 500);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}